<?php
// $Id$

/**
 * Copyright (C) 2009 imBridge NodeOne AB
 * 
 * @file
 * Views Display Tabs - A module that exposes a view's displays as tabs.
 *
 * Authors:
 *   Jakob Persson (http://drupal.org/user/37564)
 *   Joakim Stai (http://drupal.org/user/88701)
 *
 * Sponsors:
 *   SF Bio (www.sf.se)
 *   NodeOne (www.nodeone.se)
 */


/*******************************************************************************
 * HOOKS
 */

/**
 * Implementation of hook_menu()
 */
function viewsdisplaytabs_menu() {
  $items = array();

  $items['admin/settings/viewsdisplaytabs'] = array(
    'title' => 'Views Display Tabs',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_viewsdisplaytabs_admin'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;

}

/**
 * Implementation of hook_theme()
 */
function viewsdisplaytabs_theme($existing, $type, $theme, $path) {
  return array(
    '_viewsdisplaytabs_admin' => array(
      'arguments' => array('form' => null),
    ),
    'viewsdisplaytabs_tab' => array(
      'arguments' => array('title' => null, 'url' => null, 'display_name' => null),
    ),
    'viewsdisplaytabs_tab_groups' => array(
      'arguments' => array('display' => null, 'group' => null, 'class' => null),
    ),
  );
}

/**
 * Preprocess the primary theme implementation for a view.
 *
 * Add the display tabs to the view's header
 */
function viewsdisplaytabs_preprocess_views_view(&$vars) {
  global $base_path;

  $view = $vars['view'];

  $settings = variable_get('viewsdisplaytabs_settings', array());
  if ($settings['view_enabled'][$view->name] == 1) {
    $selected_displays = $settings['view_displays'][$view->name];

    // Collect displays and build grouping array
    // If no displays are selected, include all displays
    foreach ($view->display as $display_name => $display_data) {
      if (!$selected_displays || !count($selected_displays) || in_array($display_name, $selected_displays)) {

        // Allow grouping of tabs with grouping separator in titles/names: group[sep]title
        // If the separator is at position 0 or does not exist it all, do not group
        $sep = $settings['view_group_separator'][$view->name];
        if ($sep && strpos($display_data->display_title, $sep)) {
          list($group, $title) = explode($sep, $display_data->display_title);
        }
        else {
          $title = $display_data->display_title;
          $group = 0;
        }

        // Build a grouping array for later
        $displays[$group][] = theme('viewsdisplaytabs_tab', $title, $_GET['q'], $display_name);
      }
    }

    // Build header
    $header .= theme('viewsdisplaytabs_tab_groups', $displays, 'viewsdisplaytabs-tab-group');

    // Assign header
    $vars['header'] .= $header;

    // Add JS
    $js = drupal_add_js();
    $js['setting']['viewsdisplaytabs']['views'][$view->name] = $view->name;
    $js['setting']['viewsdisplaytabs']['default_display'][$view->name] = $settings['view_displays_default'][$view->name];
    $js['setting']['viewsdisplaytabs']['view_throbber'][$view->name] = $settings['view_throbber'][$view->name];
    drupal_add_js($js['setting'], 'setting');
    drupal_add_js(drupal_get_path('module', 'viewsdisplaytabs') .'/viewsdisplaytabs.js');
    drupal_add_js('misc/jquery.form.js');
  }
}

/*******************************************************************************
 * THEME FUNCTIONS
 */

/**
 * Theme the admin settings screen
 *
 * @param $form
 *     A form array
 *
 * @return
 *     A rendered form
 */
function theme__viewsdisplaytabs_admin($form) {

  // Overview table:
  $header = array(t('Enabled'), t('Name'), t('Displays'), t('Default Active'), t('Separator'), t('Throbber'), t('Edit'));

  $view_list = $form['views']['view_list'];

  if (isset($view_list['view_name']) && is_array($view_list['view_name'])) {
    foreach (element_children($view_list['view_name']) as $key) {
      $cells = array(
        drupal_render($view_list['view_enabled'][$key]),
        drupal_render($view_list['view_name'][$key]),
        drupal_render($view_list['view_displays'][$key]),
        drupal_render($view_list['view_displays_default'][$key]),
        drupal_render($view_list['view_group_separator'][$key]),
        drupal_render($view_list['view_throbber'][$key]),
        drupal_render($view_list['edit_view'][$key]),
      );
      $rows[] = $cells;
    }
  }
  else {
    $rows[] = array(array('data' => t('No supported views available.'), 'colspan' => count($header)));
  }

  $form['views']['view_list'] = array(
    '#value' => theme('table', $header, $rows, array('class' => 'viewsdisplaytabs-admin')),
  );

  drupal_add_css(drupal_get_path('module', 'viewsdisplaytabs') .'/viewsdisplaytabs.css');

  $output .= drupal_render($form);

  return $output;
}


/**
 * Theme a tab
 *
 * @param <type> $title
 * @param <type> $url
 * @param <type> $display_name
 * @return <type>
 */
function theme_viewsdisplaytabs_tab($title, $url, $display_name, $active = false) {
  return l($title, $url, array('attributes' => array('class' => 'viewsdisplaytabs-tab', 'rel' => $display_name)));
}

/**
 * Theme the groups of tabs
 * @param <type> $display_items
 * @param <type> $group
 * @param <type> $class
 * @return <type>
 */
function theme_viewsdisplaytabs_tab_groups($displays, $class) {
  $out = '<div class="viewsdisplaytabs-wrapper">';
  foreach ($displays as $group => $display_items) {
    $group = ( $group === 0 ? null : $group );
    $out .= theme('item_list', $display_items, $group, 'ul', array('class' => $class));
  }
  $out .= '</div>';
  return $out;
}


/*******************************************************************************
 * MENU CALLBACKS
 */

/**
 * Administration settings page callback
 */
function _viewsdisplaytabs_admin() {
  // Get settings
  $settings = variable_get('viewsdisplaytabs_settings', array());

  $form = array();
  $form[] = array(
    '#value' => t("<p>Views Display Tabs exposes a view's displays as links which you can then style as tabs if you so choose.</p>"),
  );
  $form['help'] = array(
    '#type' => 'fieldset',
    '#title' => t('Instructions'),
    '#collapsible' => true,
    '#collapsed' => true,
  );
  $form['help'][] = array(
    '#value' => t("<p>In order to use this module you will need at least one view which has <strong>AJAX enabled</strong>. It works with views that have (apart from the default display) <strong>at least two displays that render as HTML</strong> (page and block for example). These will become the tabs the user can click.</p>
<p>You can control what displays to expose as tabs by expanding the Displays list and checking the ones you want to show as tabs.</p>
<p>You have the option to display a throbber while the view is loading the display. The throbber is a small animation shown next to the title of the tab to indicate to the user that the browser is loading the view.</p>
<p>We had a need to group tabs, why we've made it possible to group tabs using a separator character. By setting a separator character for a view and then using the following naming convention for your tabs you may group them. Each group will then become its own list of links. Assuming ':' (colon) is used as separator:
<code>[title of group]:[title of tab]</code></p>
<p>For example:</p>
<code>
Articles:Most viewed<br/>
Articles:Most commented<br/>
Articles:Newest<br/>
Blog posts:Most viewed<br/>
Blog posts:Most commented<br/>
Blog posts:Newest
</code>
"),
);

$form['views'] = array(
    '#type' => 'fieldset',
    '#title' => t('Views'),
    '#collapsible' => false,
    '#collapsed' => false,
  );

  $views = views_get_all_views();

  foreach ($views as $vid => $view) {
    if (_viewsdisplaytabs_supported_view($view)) {

      $view_data = _viewsdisplaytabs_view_data($view);

      $view_enabled = array(
        '#type' => 'checkbox',
        '#default_value' => $settings['view_enabled'][$vid],
      );

      $view_displays_fieldset = array(
        '#type' => 'fieldset',
        '#title' => t('Displays'),
        '#collapsed' => !(is_array($settings['view_displays'][$vid]) && count($settings['view_displays'][$vid])),
        '#collapsible' => true
      );

      $view_displays_fieldset["view_displays_$vid"] = array(
        '#type' => 'checkboxes',
        '#default_value' => ( $settings['view_displays'][$vid] ? $settings['view_displays'][$vid] : array() ),
        '#options' => ( is_array($view_data->displays) ? $view_data->displays : array() ),
      );

      $view_displays_default = array(
        '#type' => 'select',
        '#default_value' => ( $settings['view_displays_default'][$vid] ? $settings['view_displays_default'][$vid] : array() ),
        '#options' => ( is_array($view_data->displays) ? array('' => '<None>') + $view_data->displays : array() ),
      );

      $view_group_separator = array(
        '#type' => 'textfield',
        '#size' => 1,
        '#maxlength' => 4,
        '#default_value' => $settings['view_group_separator'][$vid],
      );

      $view_throbber = array(
        '#type' => 'checkbox',
        '#default_value' => ( isset($settings['view_throbber'][$vid]) ? $settings['view_throbber'][$vid] : 1 ),
      );

      $form['views']['view_list']['view_enabled'][$vid]["view_enabled_$vid"] = $view_enabled;
      $form['views']['view_list']['view_name'][$vid]["view_name_$vid"] = array('#value' => $view->name);
      $form['views']['view_list']['view_displays'][$vid]["view_displays_fieldset_$vid"] = $view_displays_fieldset;
      $form['views']['view_list']['view_displays_default'][$vid]["view_displays_default_$vid"] = $view_displays_default;
      $form['views']['view_list']['view_group_separator'][$vid]["view_group_separator_$vid"] = $view_group_separator;
      $form['views']['view_list']['edit_view'][$vid]["edit_view_$vid"] = array('#value' => l(t('edit'), "admin/build/views/edit/$vid", array('query' => array('destination' => $_GET['q']))));
      $form['views']['view_list']['view_throbber'][$vid]["view_throbber_$vid"] = $view_throbber;

    }
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save settings')
  );

  return $form;

}

/*******************************************************************************
 * HELPER FUNCTIONS
 */

/**
 * Determine whether the view is supported by Views Display Tabs
 *
 * @param $view
 * @return Boolean True or False
 */
function _viewsdisplaytabs_supported_view($view) {
  foreach ($view->display as $display_name => $display) {
    if ($display->display_options['use_ajax']) {
      return true;
    }
  }
  return false;
}

/**
 * Return data for a view, such as displays
 *
 * @param An object with property: 'display'
 */
function _viewsdisplaytabs_view_data($view) {
  $view_data = new stdClass();
  foreach ($view->display as $display_name => $display) {
    $view_data->displays[$display_name] = $display->display_title;
  }
  return $view_data;
}

/**
 * Submit handler for settings form
 *
 * @param <type> $form
 * @param <type> $form_state
 */
function _viewsdisplaytabs_admin_submit($form, $form_state) {
  foreach ($form_state['values'] as $field => $value) {
    if (preg_match('/view_enabled_(.*)/i', $field, $result)) {
      $view_enabled[$result[1]] = $value;
    }
    if (preg_match('/view_displays_default_(.*)/i', $field, $result)) {
      $view_displays_default[$result[1]] = $value;
    }
    elseif (preg_match('/view_displays_(.*)/i', $field, $result)) {
      // We only save displays that have been checked, value is 1
      foreach ($value as $display_name => $display_selected) {
        if ($display_selected) {
         $view_displays[$result[1]][$display_name] = $display_selected;
        }
      }
    }
    elseif (preg_match('/view_group_separator_(.*)/i', $field, $result)) {
      $view_group_separator[$result[1]] = $value;
    }
    elseif (preg_match('/view_throbber_(.*)/i', $field, $result)) {
      $view_throbber[$result[1]] = $value;
    }
  }
  variable_set('viewsdisplaytabs_settings', array(
    'view_enabled' => $view_enabled,
    'view_displays' => $view_displays,
    'view_group_separator' => $view_group_separator,
    'view_displays_default' => $view_displays_default,
    'view_throbber' => $view_throbber
    )
  );
}