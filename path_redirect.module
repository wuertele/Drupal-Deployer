<?php
// $Id$

if (!defined('REQUEST_TIME')) {
  define('REQUEST_TIME', time());
}

/**
 * Implementation of hook_help().
 */
function path_redirect_help($path, $arg) {
  switch ($path) {
    case 'admin/build/path-redirect':
    case 'admin/build/path-redirect/list':
      return '<p>'. t('Here you can set up URL redirecting for this site. Any existing or non-existing path within this site can redirect to any internal or external URL.') .'</p>';
    //case 'admin/build/path-redirect/add':
    //case 'admin/build/path-redirect/edit/'. $arg[3]:
    //case 'admin/build/path-redirect/settings':
  }
}

/**
 * Implementation of hook_perm().
 */
function path_redirect_perm() {
  return array(
    'administer redirects',
  );
}

/**
 * Implementation of hook_menu().
 */
function path_redirect_menu() {
  $items['admin/build/path-redirect'] = array(
    'title' => 'URL redirects',
    'description' => 'Redirect users from one URL to another.',
    'page callback' => 'path_redirect_admin',
    'access arguments' => array('administer redirects'),
    'file' => 'path_redirect.admin.inc',
  );
  $items['admin/build/path-redirect/list'] = array(
    'title' => 'List',
    'description' => 'List all URL redirects.',
    'access arguments' => array('administer redirects'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -3,
  );
  $items['admin/build/path-redirect/add'] = array(
    'title' => 'Add redirect',
    'description' => 'Add a new URL redirect.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('path_redirect_edit_form'),
    'access arguments' => array('administer redirects'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'path_redirect.admin.inc',
  );
  $items['admin/build/path-redirect/edit/%path_redirect'] = array(
    'title' => 'Edit redirect',
    'description' => 'Edit an existing URL redirect.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('path_redirect_edit_form', 4),
    'access arguments' => array('administer redirects'),
    'type' => MENU_CALLBACK,
    'file' => 'path_redirect.admin.inc',
  );
  $items['admin/build/path-redirect/delete/%path_redirect'] = array(
    'title' => 'Delete redirect',
    'description' => 'Delete an existing URL redirect.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('path_redirect_delete_form', 4),
    'access arguments' => array('administer redirects'),
    'type' => MENU_CALLBACK,
    'file' => 'path_redirect.admin.inc',
  );
  $items['admin/build/path-redirect/settings'] = array(
    'title' => 'Settings',
    'description' => 'Configure behavior for URL redirects.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('path_redirect_settings_form'),
    'access arguments' => array('administer redirects'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'path_redirect.admin.inc',
  );
  //$items['admin/build/path-redirect/import'] = array(
  //  'title' => 'Import',
  //  'description' => 'Import URL redirects.',
  //  'page callback' => 'drupal_get_form',
  //  'page arguments' => array('path_redirect_import_form'),
  //  'access arguments' => array('administer redirects'),
  //  'type' => MENU_LOCAL_TASK,
  //  'weight' => 20,
  //  'file' => 'path_redirect.admin.inc',
  //);
  $items['admin/build/path-redirect/export'] = array(
    'title' => 'Export',
    'description' => 'Export URL redirects.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('path_redirect_export_form'),
    'access arguments' => array('administer redirects'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 30,
    'file' => 'path_redirect.admin.inc',
  );
  //$items['admin/build/path-redirect/export/csv'] = array(
  //  'page callback' => 'path_redirect_export_csv',
  //  'access arguments' => array('administer redirects'),
  //  'type' => MENU_CALLBACK,
  //  'file' => 'path_redirect.admin.inc',
  //);
  //$items['admin/build/path-redirect/export/xml'] = array(
  //  'page callback' => 'path_redirect_export_xml',
  //  'access arguments' => array('administer redirects'),
  //  'type' => MENU_CALLBACK,
  //  'file' => 'path_redirect.admin.inc',
  //);
  $items['js/path_redirect/autocomplete_404'] = array(
    'page callback' => 'path_redirect_js_autocomplete_404',
    'access arguments' => array('administer redirects'),
    'type' => MENU_CALLBACK,
    'file' => 'path_redirect.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_init().
 */
function path_redirect_init() {
  if ($redirect = _path_redirect_load_current_page_redirect()) {
    // Create the absolute redirection URL.
    $redirect->url_options = array(
      'query' => $redirect->query,
      'fragment' => $redirect->fragment,
      'absolute' => TRUE,
    );
    $redirect->location = url($redirect->redirect, $redirect->url_options);

    // Update the last used timestamp so that unused redirects can be purged.
    db_query("UPDATE {path_redirect} SET last_used = %d WHERE rid = %d", REQUEST_TIME, $redirect->rid);

    if (url($redirect->redirect) == url($_GET['q'])) {
      // Prevent infinite loop redirection.
      watchdog('path_redirect', 'Redirect to <code>%redirect</code> is causing an infinite loop; redirect cancelled.', array('%redirect' => $redirect->location), WATCHDOG_WARNING, l(t('Edit'), 'admin/build/path-redirect/edit/'. $redirect->rid));
    }
    elseif (path_redirect_var('allow_bypass') && isset($_GET['redirect']) && $_GET['redirect'] === 'no') {
      // If the user has requested not to be redirected, show a message.
      drupal_set_message(t('This page has been moved to <a href="@redirect">@redirect</a>.', array('@redirect' => $redirect->location)));
    }
    elseif (path_redirect_var('redirect_warning')) {
      // Show a message and automatically redirect after 10 seconds.
      drupal_set_message(t('This page has been moved to <a href="@redirect">@redirect</a>. You will be automatically redirected in 10 seconds.', array('@redirect' => $redirect->location)), 'error');
      drupal_set_html_head('<meta http-equiv="refresh" content="10;url="' . $redirect->location . '" />');
    }
    else {
      // Perform the redirect.
      unset($_REQUEST['destination']);
      drupal_goto($redirect->redirect, $redirect->query, $redirect->fragment, $redirect->type);
    }
  }
}

/**
 * Implementation of hook_cron().
 */
function path_redirect_cron() {
  // Purge inactive redirects from the database.
  if ($purge = path_redirect_var('purge_inactive')) {
    db_query("DELETE FROM {path_redirect} WHERE last_used < %d", array(':timestamp' => REQUEST_TIME - $purge));
    if ($count = db_affected_rows()) {
      watchdog('path_redirect', format_plural($count, 'Removed 1 inactive redirect from the database.', 'Removed @count inactive redirects from the database.'));
    }
  }
}

/**
 * Implementation of hook_nodeapi().
 * @todo Remove in Drupal 7.
 */
function path_redirect_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'presave':
      path_redirect_node_presave($node);
      break;
    case 'delete':
      path_redirect_node_delete($node);
      break;
  }
}

/**
 * Implementation of hook_node_presave().
 *
 * Creates automatic redirects when URL aliases are manually changed.
 */
function path_redirect_node_presave($node) {
  if (path_redirect_var('auto_redirect') && !empty($node->path)) {
    $node_path = 'node/'. $node->nid;
    $old_alias = drupal_get_path_alias($node_path, ($node->language ? $node->language : ''));
    if ($old_alias != $node_path && $node->path != $old_alias) {
      // If the user is manually changing the path alias, add a redirect from the old alias to the node.
      $redirect = array('path' => $old_alias, 'redirect' => $node_path);
      path_redirect_save($redirect);
    }
  }
}

/**
 * Implementation of hook_node_presave().
 */
function path_redirect_node_delete($node) {
  // When a node is deleted, also delete the redirects to it (they will result in a 404).
  path_redirect_delete_by_path('node/'. $node->nid);
  path_redirect_delete_by_path('node/'. $node->nid . '/%%');
}

/**
 * Save an URL redirect to the database.
 */
function path_redirect_save($redirect) {
  // Merge default values.
  $redirect += array(
    'rid' => NULL,
    'query' => '',
    'fragment' => '',
    'language' => '',
    'type' => path_redirect_var('default_status'),
    'last_used' => REQUEST_TIME,
  );

  // Allow spaces in "from" path
  // @todo Move to validation?
  $redirect['path'] = str_replace('+', ' ', $redirect['path']);

  // Remove beginning and trailing slashes from path.
  // @todo Move to validation?
  $redirect['path'] = trim($redirect['path'], '\/?');

  if (empty($redirect['rid'])) {
    return drupal_write_record('path_redirect', $redirect);
  }
  else {
    return drupal_write_record('path_redirect', $redirect, array('rid'));
  }

  // Clear the page cache for this path.
  cache_clear_all(url($redirect['path'], array('absolute' => TRUE, 'language' => $redirect['language'])), 'cache_page', TRUE);
}

function path_redirect_load($rid) {
  return db_fetch_array(db_query_range("SELECT * FROM {path_redirect} WHERE rid = %d", $rid, 0, 1));
}

function path_redirect_load_by_path($path, $language = '') {
  if (is_string($language)) {
    return db_fetch_array(db_query_range("SELECT * FROM {path_redirect} WHERE path = '%s' AND language IN ('%s', '') ORDER BY language DESC", $path, $language, 0, 1));
  }
  else {
    return db_fetch_array(db_query_range("SELECT * FROM {path_redirect} WHERE path = '%s'", $path, 0, 1));
  }
}

function _path_redirect_load_current_page_redirect() {
  global $language;

  $query = $_GET;
  unset($query['q']);

  // Check if this is a query-specific redirect.
  if ($query) {
    $path = urldecode(request_uri());
    $path = drupal_substr($path, drupal_strlen(base_path()));
    // Remove ($language->language .'/') via preg_replace?
    $path = _path_redirect_split_path($path);
    $sql = "SELECT * FROM {path_redirect} WHERE (path = '%s' OR path = '%s') AND language IN ('%s', '') ORDER BY path DESC, language DESC";
    return db_fetch_object(db_query_range($sql, $_GET['q'], $_GET['q'] . '?' . $path['query'], $language->language, 0, 1));
  }
  else {
    return path_redirect_load_by_path($_GET['q'], $language->language);
  }
}

function path_redirect_delete($redirect, $deprecated = FALSE) {
  // @todo Remove legacy path_redirect_delete support for pathauto.
  if (is_string($redirect) && is_string($deprecated)) {
    return db_query("DELETE FROM {path_redirect} WHERE path = '%s' AND redirect = '%s'", $redirect, $deprecated);
  }

  db_query("DELETE FROM {path_redirect} WHERE rid = %d", $redirect['rid']);
  return db_affected_rows();
}

/**
 * Delete any redirects to a certain path.
 */
function path_redirect_delete_by_path($path) {
  db_query("DELETE FROM {path_redirect} WHERE redirect = '%s'", $path);
  return db_affected_rows();
}

/**
 * Internal function to split a path string into path, query and fragment.
 */
function _path_redirect_split_path($path) {
  //$path = strtr($path, array('<front>' => variable_get('site_frontpage', 'node')));
  if (variable_get('clean_url', 0) && strpos($path, '?q=') === 0) {
    $path = preg_replace('/^\?q=/', '', $path, 1);
  }
  if (strpos($path, '?') === FALSE && strpos($path, '&') !== FALSE) {
    $path = preg_replace('/&/', '?', $path, 1);
  }

  $parsed = parse_url($path);
  $result = array(
    'path' => preg_replace('/[\?\#].*$/', '', $path),
    'query' => isset($parsed['query']) ? $parsed['query'] : NULL,
    'fragment' => isset($parsed['fragment']) ? $parsed['fragment'] : NULL,
  );
  return $result;
}

/**
 * Internal default variables for template_var().
 */
function path_redirect_variables() {
  return array(
    'path_redirect_redirect_warning' => 0,
    'path_redirect_allow_bypass' => 0,
    'path_redirect_auto_redirect' => 1,
    'path_redirect_purge_inactive' => 0,
    'path_redirect_default_status' => 301,
    // Unused variables set to NULL so they will still be uninstalled.
    'path_redirect_nodeapi_enabled' => NULL,
  );
}

/**
 * Internal implementation of variable_get().
 */
function path_redirect_var($name, $default = NULL) {
  static $defaults = NULL;
  if (!isset($defaults)) {
    $defaults = path_redirect_variables();
  }

  $name = 'path_redirect_'. $name;

  // @todo Remove when stable.
  if (!isset($defaults[$name])) {
    trigger_error("Default variable for $name not found.");
  }

  return variable_get($name, isset($default) || !isset($defaults[$name]) ? $default : $defaults[$name]);
}
