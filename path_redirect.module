<?php
// $Id$

/**
 * Implementation of hook_help().
 */
function path_redirect_help($path, $arg) {
  switch ($path) {
    case 'admin/build/path-redirect':
    case 'admin/build/path-redirect/list':
      return '<p>'. t('Here you can set up URL redirecting for this site. Any existing or non-existing path within this site can redirect to any internal or external URL.') .'</p>';
    //case 'admin/build/path-redirect/add':
    //case 'admin/build/path-redirect/edit/'. $arg[3]:
    //case 'admin/build/path-redirect/settings':
  }
}

/**
 * Implementation of hook_perm().
 */
function path_redirect_perm() {
  return array('administer redirects');
}

/**
 * Implementation of hook_menu().
 */
function path_redirect_menu() {
  $items['admin/build/path-redirect'] = array(
    'title' => 'URL redirects',
    'description' => 'Redirect users from one URL to another',
    'page callback' => 'path_redirect_admin',
    'access arguments' => array('administer redirects'),
    'file' => 'path_redirect.admin.inc',
  );
  $items['admin/build/path-redirect/list'] = array(
    'title' => 'List',
    'description' => 'List all URL redirects',
    'access arguments' => array('administer redirects'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -3,
  );
  $items['admin/build/path-redirect/add'] = array(
    'title' => 'Add redirect',
    'description' => 'Add a new URL redirect',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('path_redirect_edit'),
    'access arguments' => array('administer redirects'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'path_redirect.admin.inc',
  );
  $items['admin/build/path-redirect/edit'] = array(
    'title' => 'Edit',
    'description' => 'Edit an existing URL redirect',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('path_redirect_edit'),
    'access arguments' => array('administer redirects'),
    'type' => MENU_CALLBACK,
    'file' => 'path_redirect.admin.inc',
  );
  $items['admin/build/path-redirect/delete'] = array(
    'title' => 'Delete redirect',
    'description' => 'Delete an existing URL redirect',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('path_redirect_delete_confirm'),
    'access arguments' => array('administer redirects'),
    'type' => MENU_CALLBACK,
    'file' => 'path_redirect.admin.inc',
  );
  $items['admin/build/path-redirect/settings'] = array(
    'title' => 'Settings',
    'description' => 'Configure behavior for URL redirects',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('path_redirect_settings'),
    'access arguments' => array('administer redirects'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'path_redirect.admin.inc',
  );
  $items['admin/build/path-redirect/autocomplete'] = array(
    'page callback' => 'path_redirect_autocomplete',
    'access arguments' => array('administer redirects'),
    'type' => MENU_CALLBACK,
    'file' => 'path_redirect.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_init().
 */
function path_redirect_init() {
  path_redirect_check();
}

/**
 * Implementation of hook_cron().
 */
function path_redirect_cron() {
  // Purge inactive redirects from the database.
  if ($purge = variable_get('path_redirect_purge_inactive', 0)) {
    db_query("DELETE FROM {path_redirect} WHERE last_used < %d", array(':timestamp' => $_SERVER['REQUEST_TIME'] - $purge));
    if ($count = db_affected_rows()) {
      watchdog('path_redirect', 'Removed @count from the database.', array('@count' => format_plural($count, '1 inactive redirect', '@count inactive redirects')));
    }
  }
}

/**
 * If a redirect is found for the current path, perform the redirect.
 */
function path_redirect_check() {
  // see if this page has a redirect path
  // @todo Rewrite the path-fetching code here.
  // Possibilities: $_GET['q'], urldecode($path)
  $path = substr(urldecode(request_uri()), strlen(base_path()));
  if (preg_match('/^\?q=/', $path)) {
    $path = preg_replace(array('/^\?q=/', '/&/'), array('', '?'), $path, 1);
  }

  // Remove trailing slash from path.
  $path = preg_replace('/\/\?|\/$/', '', $path);

  // @todo Rewrite the redirect lookup code here.
  $r = db_fetch_object(db_query("SELECT * FROM {path_redirect} WHERE path = '%s' OR path = '%s'", $path, utf8_encode($path)));
  if (!$r && strpos($path, '?') !== FALSE) {
    // If there is no match against path and query string, check just the path
    $path = preg_replace('/\?.*/', '', $path);
    $r = db_fetch_object(db_query("SELECT * FROM {path_redirect} WHERE path = '%s' OR path = '%s'", $path, utf8_encode($path)));
  }

  if ($r) {
    // Update the last used timestamp so that unused redirects can be purged.
    db_query("UPDATE {path_redirect} SET last_used = %d WHERE path = '%s'", array(':timestamp' => $_SERVER['REQUEST_TIME'], ':path' => $r->path));

    $redirect = url($r->redirect, array('query' => $r->query, 'fragment' => $r->fragment, 'absolute' => TRUE));

    if (url($r->redirect) == url($path)) {
      // Prevent infinite loop redirection.
      watchdog('path_redirect', 'Redirect to <code>%redirect</code> is causing an infinite loop; redirect cancelled.', array('%redirect' => $r->redirect), WATCHDOG_WARNING, l(t('edit'), 'admin/build/path-redirect/edit/'. $r->rid));
    }
    elseif (variable_get('path_redirect_allow_bypass', 0) && isset($_GET['redirect']) && $_GET['redirect'] === 'no') {
      // If the user has requested not to be redirected, show a message.
      drupal_set_message(t('This page has been moved to <a href="@redirect">@redirect</a>.', array('@redirect' => $redirect)));
    }
    elseif (variable_get('path_redirect_redirect_warning', 0)) {
      // Show a message and automatically redirect after 10 seconds.
      drupal_set_message(t('This page has been moved to <a href="@redirect">@redirect</a>. You will be automatically redirected in 10 seconds.', array('@redirect' => $redirect)), 'error');
      drupal_set_html_head("<meta http-equiv=\"refresh\" content=\"10;url=$redirect\" />");
    }
    else {
      // Perform the redirect.
      unset($_REQUEST['destination']);
      drupal_goto($r->redirect, $r->query, $r->fragment, $r->type);
    }
  }
}

function path_redirect_save($edit) {
  $edit += array(
    'type' => variable_get('path_redirect_default_status', 301),
    'last_used' => $_SERVER['REQUEST_TIME'],
  );

  return drupal_write_record('path_redirect', $edit, (!empty($edit['rid']) ? 'rid' : array()));
}

/**
 * Retrieve the specified URL redirect
 */
function path_redirect_load($rid = NULL, $from = NULL) {
  if (!empty($rid)) {
    $result = db_fetch_array(db_query("SELECT rid, path, redirect, query, fragment, type FROM {path_redirect} WHERE rid = %d", $rid));
  }
  elseif (!empty($from)) {
    $result = db_fetch_array(db_query("SELECT rid, path, redirect, query, fragment, type FROM {path_redirect} WHERE path = '%s'", $from));
  }
  return $result;
}

/**
 * Delete the specified path redirect. This will delete as specifically as
 * possible, in order: by $rid, by ($from, $to), by $from, or by $to.
 * Multiple redirects may be deleted if the $to parameter matches more than
 * one entry.
 *
 * This function is part of an API available for external code to use.
 *
 * @param $from
 *   Source path of redirect to delete.
 * @param $to
 *   Destination path or URL of redirect to delete.
 * @param $rid
 *   Unique ID of redirect to delete.
 * @return
 *   The result of the deletion query.
 */
function path_redirect_delete($from = NULL, $to = NULL, $rid = NULL) {
  if (!empty($rid)) {
    $result = db_query("DELETE FROM {path_redirect} WHERE rid = %d", $rid);
  }
  elseif (!empty($from)) {
    if (!empty($to)) {
      $result = db_query("DELETE FROM {path_redirect} WHERE path = '%s' AND redirect = '%s'", $from, $to);
    }
    else {
      $result = db_query("DELETE FROM {path_redirect} WHERE path = '%s'", $from);
    }
  }
  elseif (!empty($to)) {
    $result = db_query("DELETE FROM {path_redirect} WHERE redirect = '%s'", $to);
  }
  return $result;
}
