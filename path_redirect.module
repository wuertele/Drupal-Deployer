<?php
// $Id$

/**
 * Implement hook_help().
 */
function path_redirect_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/build/path-redirect':
    case 'admin/build/path-redirect/list':
      $output .= '<p>' . t('Here you can set up URL redirecting for this site. Any existing or non-existing path within this site can redirect to any internal or external URL.') .'</p>';
      break;
    case 'admin/build/path-redirect/add':
    case 'admin/build/path-redirect/edit/%':
      $output .= '<p>' . t('If you need advanced redirection functionality (i.e. wildcards, etc.), you should be using a <a href="http://en.wikipedia.org/wiki/Mod_rewrite">webserver rewriting engine</a> rather than this module.') . '</p>';
      break;
  }
  return $output;
}

/**
 * Implement hook_theme().
 */
function path_redirect_theme() {
  return array(
    'path_redirect_admin_list_by_path' => array(
      'arguments' => array('source' => NULL, 'language' => NULL),
    ),
  );
}

/**
 * Implement hook_perm().
 */
function path_redirect_perm() {
  return array(
    'administer redirects',
  );
}

/**
 * Implement hook_menu().
 */
function path_redirect_menu() {
  $items['admin/build/path-redirect'] = array(
    'title' => 'URL redirects',
    'description' => 'Redirect users from one URL to another.',
    'page callback' => 'path_redirect_list_redirects',
    'access arguments' => array('administer redirects'),
    'file' => 'path_redirect.admin.inc',
  );
  $items['admin/build/path-redirect/list'] = array(
    'title' => 'List',
    'description' => 'List all URL redirects.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/build/path-redirect/add'] = array(
    'title' => 'Add redirect',
    'description' => 'Add a new URL redirect.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('path_redirect_edit_form'),
    'access arguments' => array('administer redirects'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'path_redirect.admin.inc',
  );
  $items['admin/build/path-redirect/edit/%path_redirect'] = array(
    'title' => 'Edit redirect',
    'description' => 'Edit an existing URL redirect.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('path_redirect_edit_form', 4),
    'access arguments' => array('administer redirects'),
    'type' => MENU_CALLBACK,
    'file' => 'path_redirect.admin.inc',
  );
  $items['admin/build/path-redirect/delete/%path_redirect'] = array(
    'title' => 'Delete redirect',
    'description' => 'Delete an existing URL redirect.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('path_redirect_delete_form', 4),
    'access arguments' => array('administer redirects'),
    'type' => MENU_CALLBACK,
    'file' => 'path_redirect.admin.inc',
  );
  $items['admin/build/path-redirect/settings'] = array(
    'title' => 'Settings',
    'description' => 'Configure behavior for URL redirects.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('path_redirect_settings_form'),
    'access arguments' => array('administer redirects'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'file' => 'path_redirect.admin.inc',
  );
  //$items['admin/build/path-redirect/import'] = array(
  //  'title' => 'Import',
  //  'description' => 'Import URL redirects.',
  //  'page callback' => 'drupal_get_form',
  //  'page arguments' => array('path_redirect_import_form'),
  //  'access arguments' => array('administer redirects'),
  //  'type' => MENU_LOCAL_TASK,
  //  'weight' => 20,
  //  'file' => 'path_redirect.admin.inc',
  //);
  $items['admin/build/path-redirect/export'] = array(
    'title' => 'Export',
    'description' => 'Export URL redirects.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('path_redirect_export_form'),
    'access arguments' => array('administer redirects'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 30,
    'file' => 'path_redirect.admin.inc',
  );
  //$items['admin/build/path-redirect/export/csv'] = array(
  //  'page callback' => 'path_redirect_export_csv',
  //  'access arguments' => array('administer redirects'),
  //  'type' => MENU_CALLBACK,
  //  'file' => 'path_redirect.admin.inc',
  //);
  //$items['admin/build/path-redirect/export/xml'] = array(
  //  'page callback' => 'path_redirect_export_xml',
  //  'access arguments' => array('administer redirects'),
  //  'type' => MENU_CALLBACK,
  //  'file' => 'path_redirect.admin.inc',
  //);
  $items['js/path_redirect/autocomplete_404'] = array(
    'page callback' => 'path_redirect_js_autocomplete_404',
    'access arguments' => array('administer redirects'),
    'type' => MENU_CALLBACK,
    'file' => 'path_redirect.admin.inc',
  );

  return $items;
}

/**
 * Implement hook_init().
 */
function path_redirect_init() {
  if ($redirect = _path_redirect_load_current_page_redirect()) {
    // Create the absolute redirection URL.
    $redirect['url_options'] = array(
      'query' => $redirect['query'],
      'fragment' => $redirect['fragment'],
      'absolute' => TRUE,
    );
    $redirect['location'] = url($redirect['redirect'], $redirect['url_options']);

    // Update the last used timestamp so that unused redirects can be purged.
    db_query("UPDATE {path_redirect} SET last_used = %d WHERE rid = %d", time(), $redirect['rid']);

    if (url($redirect['redirect']) == url($_GET['q'])) {
      // Prevent infinite loop redirection.
      watchdog('path_redirect', 'Redirect to <code>%redirect</code> is causing an infinite loop; redirect cancelled.', array('%redirect' => $redirect['location']), WATCHDOG_WARNING, l(t('Edit'), 'admin/build/path-redirect/edit/'. $redirect['rid']));
    }
    elseif (path_redirect_var('allow_bypass') && isset($_GET['redirect']) && $_GET['redirect'] === 'no') {
      // If the user has requested not to be redirected, show a message.
      drupal_set_message(t('This page has been moved to <a href="@redirect">@redirect</a>.', array('@redirect' => $redirect['location'])));
    }
    elseif (path_redirect_var('redirect_warning')) {
      // Show a message and automatically redirect after 10 seconds.
      drupal_set_message(t('This page has been moved to <a href="@redirect">@redirect</a>. You will be automatically redirected in 10 seconds.', array('@redirect' => $redirect['location'])), 'error');
      drupal_set_html_head('<meta http-equiv="refresh" content="10;url=' . $redirect['location'] . '" />');
    }
    else {
      // Perform the redirect.
      unset($_REQUEST['destination']);
      drupal_goto($redirect['redirect'], $redirect['query'], $redirect['fragment'], $redirect['type']);
    }
  }
}

/**
 * Implement hook_cron().
 */
function path_redirect_cron() {
  // Purge inactive redirects from the database.
  if ($purge = path_redirect_var('purge_inactive')) {
    db_query("DELETE FROM {path_redirect} WHERE last_used < %d", array(':timestamp' => time() - $purge));
    if ($count = db_affected_rows()) {
      watchdog('path_redirect', format_plural($count, 'Removed 1 inactive redirect from the database.', 'Removed @count inactive redirects from the database.'));
    }
  }
}

/**
 * Implement hook_form_alter().
 *
 * Add a summary of redirects pointing to a node on its edit form.
 */
function path_redirect_form_alter(&$form, $form_state, $form_id) {
  if (substr($form_id, -10) == '_node_form' && isset($form['#node']->nid) && user_access('administer redirects')) {
    $node = $form['#node'];
    $redirect = array(
      'dst' => 'node/' . $form['#node']->nid,
      'language' => $form['#node']->language,
    );
    $form['path_redirect'] = array(
      '#type' => 'fieldset',
      '#title' => t('URL redirects'),
      '#description' => t('The following are a list of URL redirects that point to this location.'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => 30,
    );
    $form['path_redirect']['table'] = array(
      '#type' => 'markup',
      '#value' => theme('path_redirect_admin_list_by_path', $redirect['dst'], $redirect['language']),
    );
    $form['path_redirect']['add'] = array(
      '#type' => 'markup',
      '#value' => '<p>' . l(t('Add new redirect'), 'admin/build/path-redirect/add', array('query' => drupal_get_destination() . '&' . drupal_query_string_encode($redirect))) . '</p>',
    );
    if (module_exists('vertical_tabs')) {
      drupal_add_js(drupal_get_path('module', 'path_redirect') . '/path_redirect.js');
    }
  }
}

/**
 * Implement hook_nodeapi().
 */
function path_redirect_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'presave':
      path_redirect_check_alias_changed('node/' . $node->nid, $node->path, $node->language);
      break;
    case 'delete':
      // When a node is deleted, also delete the redirects to it (they will result in a 404).
      path_redirect_delete_by_path('node/'. $node->nid);
      path_redirect_delete_by_path('node/'. $node->nid . '/%%');
      break;
  }
}

/**
 * Creates a redirect if an URL alias is being changed.
 *
 * @todo Move to hook_path_update() in Drupal 7?
 *
 * @param $path
 *   The base (normal) path.
 * @param $new_alias
 *   The new alias for the path.
 * @param $language
 *   The language of the alias being created.
 * @return
 *   TRUE if a redirect was created, or FALSE otherwise.
 */
function path_redirect_check_alias_changed($path, $new_alias, $language = '') {
  if (!path_redirect_var('auto_redirect') || empty($new_alias)) {
    return FALSE;
  }

  $old_alias = drupal_get_path_alias($path, $language);
  if ($old_alias != $base_path && $old_alias != $new_alias) {
    // If the user is manually changing the path alias, add a redirect from the old alias to the node.
    $redirect = array(
      'path' => $old_alias,
      'redirect' => $new_alias,
    );
    return path_redirect_save($redirect);
  }
}

/**
 * Implementation of hook_taxonomy().
 */
function path_redirect_taxonomy($op, $type, $array = NULL) {
  if ($op == 'delete' && $type == 'term') {
    // Delete any redirects to valid taxonomy paths.
    $term = (object) $array;
    $term->path = taxonomy_term_path($term);
    path_redirect_delete_by_path($term->path);
    if ($term->path != 'taxonomy/term/' . $term->tid) {
      path_redirect_delete_by_path('taxonomy/term/' . $term->tid);
    }
  }
}

/**
 * Implementation of hook_user().
 */
function path_redirect_user($op, &$edit, &$account, $category = NULL) {
  if ($op == 'delete') {
    // Delete any redirects to valid user paths.
    path_redirect_delete_by_path('user/'. $account->uid);
    path_redirect_delete_by_path('user/'. $account->uid . '/%%');
  }
}

/**
 * Validate a redirection.
 */
function path_redirect_validate_redirect($redirect, $form_parents = '') {
  if (strpos($redirect['path'], '#') !== FALSE) {
    // Check that the "from" path is valid and contains no # fragment
    form_set_error($form_parents . 'path', t('The <strong>from</strong> path cannot use a fragment anchor.'));
  }

  //if (!valid_url($form_state['values']['path'])) {
  //  //Make sure "from" has the form of a local Drupal path
  //  form_set_error('path', t('The redirect <strong>from</strong> path does not appear valid. This must be a local Drupal path.'));
  //}

  if ($existing = path_redirect_load_by_path($redirect['path'], $redirect['language'])) {
    if ($redirect['rid'] != $existing['rid']) {
      // The "from" path should not conflict with another redirect
      form_set_error($form_parents . 'path', t('The <strong>from</strong> path %source is already being redirected. Do you want to <a href="@edit-page">edit the existing redirect</a>?', array('%source' => $redirect['path'], '@edit-page' => url('admin/build/path-redirect/edit/'. $existing['rid']))));
    }
  }

  if ($pid = db_result(db_query("SELECT pid FROM {url_alias} WHERE dst = '%s'", $redirect['path']))) {
    // A redirect's 'from' cannot match any values from url_alias, it will cause an infinite loop.
    form_set_error($form_parents . 'path', t('You cannot add an existing alias as a redirect as it will not work. You must <a href="@alias-delete">delete the alias</a> first.', array('@alias-delete' => url('admin/build/path/delete/' . $pid, array('query' => drupal_get_destination())))));
  }

  if (menu_get_item($redirect['path'])) {
    form_set_error($form_parents . 'path', t('You cannot create a redirect from a currently valid path.'));
  }

  if (!valid_url($redirect['redirect']) && !valid_url($redirect['redirect'], TRUE) && $redirect['redirect'] != '<front>') {
    form_set_error($form_parents . 'redirect', t('The redirect <strong>to</strong> path does not appear valid.'));
  }

  // check that there there are no redirect loops
  if (url($redirect['path']) == url($redirect['redirect'])) {
    form_set_error($form_parents . 'redirect', t('You are attempting to redirect the page to itself. This will result in an infinite loop.'));
  }
}

/**
 * Save an URL redirect to the database.
 */
function path_redirect_save($redirect) {
  // Merge default values.
  $redirect += array(
    'rid' => NULL,
    'query' => '',
    'fragment' => '',
    'language' => '',
    'type' => path_redirect_var('default_status'),
    'last_used' => time(),
  );

  // Allow spaces in "from" path
  // @todo Move to validation?
  $redirect['path'] = str_replace('+', ' ', $redirect['path']);

  // Remove beginning and trailing slashes from path.
  // @todo Move to validation?
  $redirect['path'] = trim($redirect['path'], '\/?');

  if (empty($redirect['rid'])) {
    return drupal_write_record('path_redirect', $redirect);
  }
  else {
    return drupal_write_record('path_redirect', $redirect, array('rid'));
  }

  // Clear the page cache for this path.
  cache_clear_all(url($redirect['path'], array('absolute' => TRUE, 'language' => $redirect['language'])), 'cache_page', TRUE);
}

/**
 * Load a redirect by ID.
 *
 * @param $rid
 *   An integer with the redirect ID.
 */
function path_redirect_load($rid) {
  return db_fetch_array(db_query_range("SELECT * FROM {path_redirect} WHERE rid = %d", $rid, 0, 1));
}

/**
 * Load a redirect by incoming path and language.
 *
 * @param $path
 *   The incoming path.
 * @param $language
 *   An optional language code.
 */
function path_redirect_load_by_path($path, $language = '') {
  path_redirect_init_path($path);
  if (is_string($language)) {
    return db_fetch_array(db_query_range("SELECT * FROM {path_redirect} WHERE path = '%s' AND language IN ('%s', '') ORDER BY language DESC", $path, $language, 0, 1));
  }
  else {
    return db_fetch_array(db_query_range("SELECT * FROM {path_redirect} WHERE path = '%s'", $path, 0, 1));
  }
}

/**
 * Loads all redirects that point to a certain redirect path.
 *
 * @param $path
 *   The redirect path.
 */
function path_redirect_load_multiple_by_redirect($path) {
  $query = db_query("SELECT * FROM {path_redirect} WHERE redirect = '%s'", $path);
  $redirects = array();
  while ($redirect = db_fetch_array($query)) {
    $redirects[$redirect['rid']] = $redirect;
  }
  return $redirects;
}

/**
 * Loads the redirect for the current page request.
 *
 * @return
 *   An array with the redirect if the current page should be redirected, or
 *   FALSE otherwise.
 */
function _path_redirect_load_current_page_redirect() {
  global $language;

  $page = $_GET['q'];
  path_redirect_init_path($page);

  $query = $_GET;
  unset($query['q']);

  // Check if this is a query-specific redirect.
  if ($query) {
    $path = urldecode(request_uri());
    $path = drupal_substr($path, drupal_strlen(base_path()));
    $path = _path_redirect_split_path($path);
    $sql = "SELECT * FROM {path_redirect} WHERE (path = '%s' OR path = '%s') AND language IN ('%s', '') ORDER BY path DESC, language DESC";
    return db_fetch_array(db_query_range($sql, $page, $page . '?' . $path['query'], $language->language, 0, 1));
  }
  else {
    return path_redirect_load_by_path($page, $language->language);
  }
}

/**
 * Delete a redirect.
 *
 * @param $redirect
 *   An array with the redirect data.
 */
function path_redirect_delete($redirect, $deprecated = FALSE) {
  // @todo Remove legacy path_redirect_delete support for pathauto.
  if (is_string($redirect) && is_string($deprecated)) {
    return db_query("DELETE FROM {path_redirect} WHERE path = '%s' AND redirect = '%s'", $redirect, $deprecated);
  }
  elseif (is_array($redirect) && !isset($redirect['rid'])) {
    return db_query("DELETE FROM {path_redirect} WHERE path = '%s' AND redirect = '%s'", $redirect['path'], $redirect['redirect']);
  }

  db_query("DELETE FROM {path_redirect} WHERE rid = %d", $redirect['rid']);
  return db_affected_rows();
}

/**
 * Delete any redirects that point to a certain redirect path.
 *
 * @param $path
 *   The redirect path.
 */
function path_redirect_delete_by_path($path) {
  path_redirect_init_path($path);
  db_query("DELETE FROM {path_redirect} WHERE redirect = '%s'", $path);
  return db_affected_rows();
}

function path_redirect_init_path(&$path) {
  if ($path == variable_get('site_frontpage', 'node')) {
    $path = '<front>';
  }
}

/**
 * Internal function to split a path string into path, query and fragment.
 */
function _path_redirect_split_path($path) {
  if (variable_get('clean_url', 0) && strpos($path, '?q=') === 0) {
    $path = preg_replace('/^\?q=/', '', $path, 1);
  }
  if (strpos($path, '?') === FALSE && strpos($path, '&') !== FALSE) {
    $path = preg_replace('/&/', '?', $path, 1);
  }

  $parsed = parse_url($path);
  $result = array(
    'path' => preg_replace('/[\?\#].*$/', '', $path),
    'query' => isset($parsed['query']) ? $parsed['query'] : NULL,
    'fragment' => isset($parsed['fragment']) ? $parsed['fragment'] : NULL,
  );
  return $result;
}

/**
 * Show a table listing of redirects pointing to a path.
 */
function theme_path_redirect_admin_list_by_path($source, $language) {
  $header = array(
    array('data' => t('From'), 'field' => 'path', 'sort' => 'asc'),
    array('data' => t('Type'), 'field' => 'type'),
    array('data' => t('Operations'), 'colspan' => '2'),
  );
  $rows = array();
  $redirects = path_redirect_load_multiple_by_redirect($source);
  foreach ($redirects as $rid => $redirect) {
    $rows[] = array(
      'data' => array(
        $redirect['path'],
        $redirect['type'],
        l(t('Edit'), 'admin/build/path-redirect/edit/'. $rid, array('query' => drupal_get_destination())),
        l(t('Delete'), 'admin/build/path-redirect/delete/'. $rid, array('query' => drupal_get_destination())),
      ),
    );
  }
  if (empty($rows)) {
    $rows[] = array(array(
      'data' => t('No redirects found.'),
      'colspan' => 4,
      'class' => 'path-redirect-none',
    ));
  }
  return theme('table', $header, $rows, array('class' => 'path-redirects'));
}

/**
 * Internal default variables for template_var().
 */
function path_redirect_variables() {
  return array(
    'path_redirect_redirect_warning' => 0,
    'path_redirect_allow_bypass' => 0,
    'path_redirect_auto_redirect' => 1,
    'path_redirect_purge_inactive' => 0,
    'path_redirect_default_status' => 301,
    // Unused variables set to NULL so they will still be uninstalled.
    'path_redirect_nodeapi_enabled' => NULL,
  );
}

/**
 * Internal implementation of variable_get().
 */
function path_redirect_var($name, $default = NULL) {
  static $defaults = NULL;
  if (!isset($defaults)) {
    $defaults = path_redirect_variables();
  }

  $name = 'path_redirect_'. $name;

  // @todo Remove when stable.
  if (!isset($defaults[$name])) {
    trigger_error("Default variable for $name not found.");
  }

  return variable_get($name, isset($default) || !isset($defaults[$name]) ? $default : $defaults[$name]);
}
