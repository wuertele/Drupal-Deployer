<?php
// $Id$

/**
 * Implementation of hook_help().
 */
function path_redirect_help($path, $arg) {
  switch ($path) {
    case 'admin/build/path-redirect':
    case 'admin/build/path-redirect/list':
      return '<p>'. t('Here you can set up URL redirecting for this site. Any existing or non-existing path within this site can redirect to any internal or external URL.') .'</p>';
    //case 'admin/build/path-redirect/add':
    //case 'admin/build/path-redirect/edit/'. $arg[3]:
    //case 'admin/build/path-redirect/settings':
  }
}

/**
 * Implementation of hook_perm().
 */
function path_redirect_perm() {
  return array('administer redirects');
}

/**
 * Implementation of hook_menu().
 */
function path_redirect_menu() {
  $items['admin/build/path-redirect'] = array(
    'title' => 'URL redirects',
    'description' => 'Redirect users from one URL to another',
    'page callback' => 'path_redirect_admin',
    'access arguments' => array('administer redirects'),
    'file' => 'path_redirect.admin.inc',
  );
  $items['admin/build/path-redirect/list'] = array(
    'title' => 'List',
    'description' => 'List all URL redirects',
    'access arguments' => array('administer redirects'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -3,
  );
  $items['admin/build/path-redirect/add'] = array(
    'title' => 'Add redirect',
    'description' => 'Add a new URL redirect',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('path_redirect_edit'),
    'access arguments' => array('administer redirects'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'path_redirect.admin.inc',
  );
  $items['admin/build/path-redirect/edit'] = array(
    'title' => 'Edit',
    'description' => 'Edit an existing URL redirect',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('path_redirect_edit'),
    'access arguments' => array('administer redirects'),
    'type' => MENU_CALLBACK,
    'file' => 'path_redirect.admin.inc',
  );
  $items['admin/build/path-redirect/delete'] = array(
    'title' => 'Delete redirect',
    'description' => 'Delete an existing URL redirect',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('path_redirect_delete_confirm'),
    'access arguments' => array('administer redirects'),
    'type' => MENU_CALLBACK,
    'file' => 'path_redirect.admin.inc',
  );
  $items['admin/build/path-redirect/settings'] = array(
    'title' => 'Settings',
    'description' => 'Configure behavior for URL redirects',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('path_redirect_settings'),
    'access arguments' => array('administer redirects'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'path_redirect.admin.inc',
  );
  $items['admin/build/path-redirect/autocomplete'] = array(
    'page callback' => 'path_redirect_autocomplete',
    'access arguments' => array('administer redirects'),
    'type' => MENU_CALLBACK,
    'file' => 'path_redirect.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_init().
 */
function path_redirect_init() {
  path_redirect_check();
}

/**
 * Implementation of hook_cron().
 */
function path_redirect_cron() {
  // Purge inactive redirects from the database.
  if ($purge = variable_get('path_redirect_purge_inactive', 0)) {
    db_query("DELETE FROM {path_redirect} WHERE last_used < %d", array(':timestamp' => time() - $purge));
    if ($count = db_affected_rows()) {
      watchdog('path_redirect', 'Removed @count from the database.', array('@count' => format_plural($count, '1 inactive redirect', '@count inactive redirects')));
    }
  }
}

/**
 * If a redirect is found for the current path, perform the redirect.
 */
function path_redirect_check() {
  // see if this page has a redirect path
  // @todo Rewrite the path-fetching code here.
  // Possibilities: $_GET['q'], urldecode($path)
  $path = drupal_substr(urldecode(request_uri()), drupal_strlen(base_path()));
  if (preg_match('/^\?q=/', $path)) {
    $path = preg_replace(array('/^\?q=/', '/&/'), array('', '?'), $path, 1);
  }

  // Remove trailing slash from path.
  $path = preg_replace('/\/\?|\/$/', '', $path);

  // @todo Rewrite the redirect lookup code here.
  $r = path_redirect_load(array('path' => $path));
  if (!$r && strpos($path, '?') !== FALSE) {
    // If there is no match against path and query string, check just the path
    $path = preg_replace('/\?.*/', '', $path);
    $r = path_redirect_load(array('path' => $path));
  }

  if ($r) {
    // Update the last used timestamp so that unused redirects can be purged.
    // @todo Use $r->last_used = time(); path_redirect_save((array) $r); ?
    db_query("UPDATE {path_redirect} SET last_used = %d WHERE path = '%s'", array(':timestamp' => time(), ':path' => $r->path));

    $redirect = url($r->redirect, array('query' => $r->query, 'fragment' => $r->fragment, 'absolute' => TRUE));

    if (url($r->redirect) == url($path)) {
      // Prevent infinite loop redirection.
      watchdog('path_redirect', 'Redirect to <code>%redirect</code> is causing an infinite loop; redirect cancelled.', array('%redirect' => $r->redirect), WATCHDOG_WARNING, l(t('edit'), 'admin/build/path-redirect/edit/'. $r->rid));
    }
    elseif (variable_get('path_redirect_allow_bypass', 0) && isset($_GET['redirect']) && $_GET['redirect'] === 'no') {
      // If the user has requested not to be redirected, show a message.
      drupal_set_message(t('This page has been moved to <a href="@redirect">@redirect</a>.', array('@redirect' => $redirect)));
    }
    elseif (variable_get('path_redirect_redirect_warning', 0)) {
      // Show a message and automatically redirect after 10 seconds.
      drupal_set_message(t('This page has been moved to <a href="@redirect">@redirect</a>. You will be automatically redirected in 10 seconds.', array('@redirect' => $redirect)), 'error');
      drupal_set_html_head("<meta http-equiv=\"refresh\" content=\"10;url=$redirect\" />");
    }
    else {
      // Perform the redirect.
      unset($_REQUEST['destination']);
      drupal_goto($r->redirect, $r->query, $r->fragment, $r->type);
    }
  }
}

/**
 * Implementation of hook_nodeapi().
 *
 * Creates automatic redirects when URL aliases are manually changed.
 */
function path_redirect_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($op == 'presave' && variable_get('path_redirect_auto_redirect', 1) && empty($node->pathauto_perform_alias) && !empty($node->path)) {
    $old_alias = drupal_get_path_alias("node/{$node->nid}", ($node->language ? $node->language : ''));
    if ($node->path != $old_alias && $old_alias != "node/{$node->nid}") {
      // If the user is manually changing the path alias, add a redirect from the old alias to the node.
      path_redirect_save(array('path' => $old_alias, 'redirect' => "node/{$node->nid}"));
    }
  }
  elseif ($op == 'delete') {
    // When a node is deleted, also delete the redirects to it (they will result in a 404).
    path_redirect_delete(array('redirect' => "node/{$node->nid}"));
  }
}

/*function path_redirect_from_path_admin_form_alter(&$form, $form_state) {
  $form['#validate'][] = 'path_redirect_path_admin_form_validate';
}

function path_redirect_path_admin_form_validate($form, $form_state) {
}*/

/**
 * Save an URL redirect to the database.
 */
function path_redirect_save($edit) {
  // Merge default values.
  $edit += array(
    'type' => variable_get('path_redirect_default_status', 301),
    'last_used' => time(),
  );

  // Remove beginning and trailing slashes from path.
  $edit['path'] = preg_replace('/^\/|\/\?|\/$/', '', $edit['path']);

  return drupal_write_record('path_redirect', $edit, (!empty($edit['rid']) ? 'rid' : array()));
}

/**
 * Retrieve a specific URL redirect from the database.
 */
function path_redirect_load($array = array(), $join = 'AND') {
  if (is_numeric($array)) {
    $array = array('rid' => $array);
  }

  if (!empty($array) && is_array($array)) {
    $query = array();
    foreach ($array as $key => $value) {
      $query[] = $key .' = '. (is_numeric($value) ? '%d' : "'%s'");
    }
    return db_fetch_object(db_query_range("SELECT * FROM {path_redirect} WHERE ". implode(" $join ", $query), $array, 0, 1));
  }
}

/**
 * Delete a specific URL redirect from the database.
 */
function path_redirect_delete($array = array(), $join = 'AND') {
  if (is_numeric($array)) {
    $array = array('rid' => $array);
  }

  // @todo Remove legacy path_redirect_delete support for pathauto.
  if (is_string($array) && is_string($join)) {
    $array = array('path' => $array, 'redirect' => $join);
    $join = 'AND';
  }

  if (!empty($array) && is_array($array)) {
    $query = array();
    foreach ($array as $key => $value) {
      $query[] = $key .' = '. (is_numeric($value) ? '%d' : "'%s'");
    }
    return db_query("DELETE FROM {path_redirect} WHERE ". implode(" $join ", $query), $array);
  }
}
