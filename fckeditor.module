<?php
// $Id$
/**
 * FCKeditor - The text editor for Internet - http://www.fckeditor.net
 * Copyright (C) 2003-2008 Frederico Caldeira Knabben
 *
 * == BEGIN LICENSE ==
 *
 * Licensed under the terms of any of the following licenses at your
 * choice:
 *
 *  - GNU General Public License Version 2 or later (the "GPL")
 *    http://www.gnu.org/licenses/gpl.html
 *
 *  - GNU Lesser General Public License Version 2.1 or later (the "LGPL")
 *    http://www.gnu.org/licenses/lgpl.html
 *
 *  - Mozilla Public License Version 1.1 or later (the "MPL")
 *    http://www.mozilla.org/MPL/MPL-1.1.html
 *
 * == END LICENSE ==
 *
 * @file
 * FCKeditor Module for Drupal 6.x
 *
 * This module allows Drupal to replace textarea fields with FCKeditor.
 *
 * This HTML text editor brings to the web many of the powerful functionalities
 * of known desktop editors like Word. It's really  lightweight and doesn't
 * require any kind of installation on the client computer.
 */

/**
 * The name of simplified toolbar which should be forced
 * Be sure that this toolbar is defined in fckeditor.config.js or fckconfig.js
 */
define('FCKEDITOR_FORCE_SIMPLE_TOOLBAR_NAME', 'DrupalBasic') ;

/**
 * Implementation of hook_help().
 * 
 * This function delegates execution to fckeditor_help_delegate() in fckeditor.help.inc to
 * lower the amount of code in fckeditor.module
 */
function fckeditor_help($path, $arg) {
  module_load_include('help.inc', 'fckeditor');
  return module_invoke('fckeditor', 'help_delegate', $path, $arg);
}

/**
 * Implementation of hook_user().
 * 
 * This function delegates execution to fckeditor_user_delegate() in fckeditor.user.inc to
 * lower the amount of code in fckeditor.module
 */
function fckeditor_user($type, $edit, &$user, $category = NULL) {
  if (($type == 'form' && $category == 'account' && user_access('access fckeditor')) || $type == 'validate') {
    module_load_include('user.inc', 'fckeditor');
    return module_invoke('fckeditor', 'user_delegate', $type, $edit, $user, $category);
  }
  return null;
}

/**
 * Implementation of hook_perm().
 * Administer -> User management -> Permissions
 */
function fckeditor_perm() {
  return array('administer fckeditor', 'access fckeditor', 'allow fckeditor file uploads');
}

/**
 * Implementation of hook_elements().
 * Replace textarea with FCKeditor using callback function (fckeditor_process_textarea)
 */
function fckeditor_elements() {
  $type = array();
  $type['textfield'] = array(
    '#process' => array(
      'fckeditor_process_input'
    ),
  );
  if (user_access('access fckeditor')) {
    // only roles with permission get the fckeditor
    if (fckeditor_is_compatible_client()) {
      // it would be useless to dig deeper if we're not able or allowed to
      $type['textarea'] = array(
        '#process' => array(
          'fckeditor_process_textarea'
        ),
      );
    }
  }
  return $type;
}

/**
 * Allow more than 255 chars in Allowed HTML tags textfield
 */
function fckeditor_process_input($element) {
  if ($element['#id']=='edit-allowed-html-1') {
    $element['#maxlength'] = max($element['#maxlength'], 1024);
  }
  return $element;
}

/**
 * Inplementation of hook_menu().
 */
function fckeditor_menu() {
  $items = array();

  $items['admin/settings/fckeditor'] = array(
  'title' => 'FCKeditor settings',
  'description' => 'Configure the rich editor.',
  'page callback' => 'fckeditor_admin_main',
  'file' => 'fckeditor.admin.inc',
  'access arguments' => array('administer fckeditor'),
  'type' => MENU_NORMAL_ITEM,
  );
  
  $items['admin/settings/fckeditor/add'] = array(
  'title' => 'Add new FCKeditor profile',
  'description' => 'Configure the rich editor.',
  'page callback' => 'drupal_get_form',
  'page arguments' => array('fckeditor_admin_profile_form'),
  'file' => 'fckeditor.admin.inc',
  'access arguments' => array('administer fckeditor'),
  'type' => MENU_CALLBACK,
  );
  
  $items['admin/settings/fckeditor/edit/%fckeditor_profile'] = array(
  'title' => 'Edit FCKeditor profile',
  'description' => 'Configure the rich editor.',
  'page callback' => 'drupal_get_form',
  'page arguments' => array('fckeditor_admin_profile_form', 4),
  'file' => 'fckeditor.admin.inc',
  'access arguments' => array('administer fckeditor'),
  'type' => MENU_CALLBACK,
  );
  
  $items['admin/settings/fckeditor/delete/%fckeditor_profile'] = array(
  'title' => 'Delete FCKeditor profile',
  'description' => 'Configure the rich editor.',
  'page callback' => 'drupal_get_form',
  'page arguments' => array('fckeditor_admin_profile_delete_form', 4),
  'file' => 'fckeditor.admin.inc',
  'access arguments' => array('administer fckeditor'),
  'type' => MENU_CALLBACK,
  );
  
  $items['admin/settings/fckeditor/addg'] = array(
  'title' => 'Add FCKeditor Global profile',
  'description' => 'Configure the rich editor.',
  'page callback' => 'drupal_get_form',
  'page arguments' => array('fckeditor_admin_global_profile_form', 'add'),
  'file' => 'fckeditor.admin.inc',
  'access arguments' => array('administer fckeditor'),
  'type' => MENU_CALLBACK,
  );
  
  $items['admin/settings/fckeditor/editg'] = array(
  'title' => 'Edit FCKeditor Global profile',
  'description' => 'Configure the rich editor.',
  'page callback' => 'drupal_get_form',
  'page arguments' => array('fckeditor_admin_global_profile_form', 'edit'),
  'file' => 'fckeditor.admin.inc',
  'access arguments' => array('administer fckeditor'),
  'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_init().
 */
function fckeditor_init() {
  drupal_add_css(drupal_get_path('module', 'fckeditor') .'/fckeditor.css');
}

/**
 * Implementation of hook_file_download(). 
 * Support for private downloads.
 */
function fckeditor_file_download($file) {
  if (module_exists('imce') && variable_get('imce_settings_fck', 0)) {
    return NULL;
  }
  if (module_exists('upload')) {
    $result = db_query("SELECT f.* FROM {files} f WHERE filepath = '%s'", $file);
    if (($file = db_fetch_object($result))) {
      return NULL;
    }
  }
  //it is probably file uploaded with FCKeditor
  if (($path = file_create_path($file))) {
    $ctype = ($info = @getimagesize($path)) ? $info['mime'] : (function_exists('mime_content_type') ? mime_content_type($path) : 'application/x-download');
    return array('Content-Type: '. $ctype .'; authoritative=true');
  }
  
  return -1;
}

/**
 * Load all profiles. Just load one profile if $name is passed in.
 */
function fckeditor_profile_load($name = '') {
  static $profiles = array();

  if (!$profiles) {
    $result = db_query('SELECT * FROM {fckeditor_settings}');
    while (($data = db_fetch_object($result))) {
      $data->settings = unserialize($data->settings);
      $data->rids = array();
      
      $profiles[$data->name] = $data;
    }
    
    $roles = user_roles();
    $result = db_query('SELECT name, rid FROM {fckeditor_role}');
    while (($data = db_fetch_object($result))) {
      $profiles[$data->name]->rids[$data->rid] = $roles[$data->rid];
    }
  }
  
  return ($name ? (isset($profiles[$name]) ? $profiles[$name] : false) : $profiles);
}

/**
 * @param int $excl_mode 1/include, exclude otherwise
 * @param string $excl_regex paths (drupal paths with ids attached)
 * @param string $element_id current ID
 * @param string $get_q current path
 * 
 * @return boolean
 *    returns true if FCKeditor is enabled
 */
function fckeditor_is_enabled($excl_mode, $excl_regex, $element_id, $get_q) {
  $front = variable_get('site_frontpage', 'node');
  $excl_regex = str_replace('<front>', $front, $excl_regex);
  $element_id = str_replace('.', '\.', $element_id);
  $match = !empty($excl_regex) && preg_match($excl_regex, $get_q .'.'. $element_id);
  
  return ($excl_mode == '0' xor $match);
}

/**
 * This function create the HTML objects required for the FCKeditor
 *
 * @param $element
 *   A fully populated form elment to add the editor to
 * @return
 *   The same $element with extra FCKeditor markup and initialization
 */
function fckeditor_process_textarea($element) {
  static $is_running = FALSE;
  static $num = 1;
  global $user;

  //skip this one, surely nobody wants WYSIWYG here

  switch ($element['#id']) {
    case 'edit-simple-incl':
    case 'edit-log':
    case 'edit-excl':
    case 'edit-js-conf':
      return $element;
      break;
  }

  if (isset($element['#attributes']['disabled']) && $element['#attributes']['disabled'] == 'disabled') {
    return $element;
  }

  $profile = fckeditor_user_get_profile($user);
  if (!$profile) {
    return $element;
  }

  $conf = array();
  $conf = $profile->settings;

  if ($conf['allow_user_conf']=='t') {
    foreach (array('default', 'show_toggle', 'popup', 'skin', 'toolbar', 'expand', 'width', 'lang', 'auto_lang') as $setting) {
      $conf[$setting] = fckeditor_user_get_setting($user, $profile, $setting);
    }
  }
  if ($conf["popup"]=="t" && $conf["show_toggle"]=="t") {
    $conf["show_toggle"]="f";
  }

  $themepath = path_to_theme() .'/';
  $host = base_path();

  $enabled = fckeditor_is_enabled(empty($conf['excl_mode']) ? '0' : $conf['excl_mode'], empty($conf['excl_regex']) ? '' : $conf['excl_regex'], $element['#id'], $_GET['q']);
  if ($enabled) {
    $global_profile = fckeditor_profile_load('FCKeditor Global Profile');
    $global_conf = $global_profile->settings;
    if ($global_conf) {
      $enabled = fckeditor_is_enabled(empty($global_conf['excl_mode']) ? '0' : $global_conf['excl_mode'], empty($global_conf['excl_regex']) ? '' : $global_conf['excl_regex'], $element['#id'], $_GET['q']);
    }
  }
  if (!isset($element['#suffix'])) {
    $element['#suffix'] = "";
  }

  if ((($element['#rows'] > $conf['min_rows']) || ($conf['min_rows'] <= 1 && empty($element['#rows']))) && $enabled) {
    // only replace textarea when it has enough rows and it is enabled

    // Set resizable to false to avoid drupal.js resizable function from taking control of the textarea
    if ($conf["popup"]=="f") {
      $element['#resizable'] = FALSE;
    }

    $js_id = 'oFCK_'. $num++;
    $fckeditor_on = ($conf['default']=='t') ? 1 : 0 ;

    $content = "";
    if (isset($element['#post']['teaser_js'])) {
      $content .= $element['#post']['teaser_js'] ."<!--break-->";
    }
    $content .= $element['#value'];
    $wysiwyg_link = "<div id=\"fck_{$js_id}\"><textarea id=\"{$js_id}\">". htmlspecialchars($content) ."</textarea></div>\n";
    $wysiwyg_link .= "<a href=\"javascript:Toggle('{$js_id}','{$element['#id']}','". str_replace("'", "\\'", t("Switch to plain text editor")) ."','". str_replace("'", "\\'", t("Switch to rich text editor")) ."');\" id=\"switch_{$js_id}\" ". ($fckeditor_on?"style=\"display:none\"":"") .">";
    $wysiwyg_link .= $fckeditor_on ? t("Switch to plain text editor") : t("Switch to rich text editor");
    $wysiwyg_link .= "</a>";
    $wysiwyg_link .= "\n<script type=\"text/javascript\">";
    $wysiwyg_link .= "window.setTimeout(\"CreateToggle('{$element['#id']}','{$js_id}', $fckeditor_on);\",100);\n</script>";
    //settings are saved as strings, not booleans
    if ($profile->settings['show_toggle'] == 't') {
      // Make sure to append to #suffix so it isn't completely overwritten
      $element['#suffix'] .= $wysiwyg_link;
    }
    // setting some variables
    $module_drupal_path = drupal_get_path('module', 'fckeditor');
    $module_full_path = $host . $module_drupal_path;
    // get the default drupal files path
    $files_path = $host . file_directory_path();
    // module_drupal_path:
    //  'modules/fckeditor' (length=17)
    // module_full_path:
    //  '/drupal5/modules/fckeditor' (length=26)
    // files_path:
    //  '/drupal5/files' (length=14)
    // configured in settings
    $width = $conf['width'];

    // sensible default for small toolbars
    $height = $element['#rows'] * 14 + 140;

    if (!$is_running) {
      drupal_add_js($module_drupal_path .'/fckeditor/fckeditor.js');
      drupal_add_js($module_drupal_path .'/fckeditor.utils.js');
      $is_running = TRUE;
    }

    $toolbar = $conf['toolbar'];
    //$height += 100; // for larger toolbars

    $force_simple_toolbar = fckeditor_is_enabled('1', empty($conf['simple_incl_regex']) ? '' : $conf['simple_incl_regex'], $element['#id'], $_GET['q']);
    if (!$force_simple_toolbar) {
      $force_simple_toolbar = fckeditor_is_enabled('1', empty($global_conf['simple_incl_regex']) ? '' : $global_conf['simple_incl_regex'], $element['#id'], $_GET['q']);
    }
    if ($force_simple_toolbar) {
      $toolbar = FCKEDITOR_FORCE_SIMPLE_TOOLBAR_NAME;
    }
    $textarea_id = $profile->settings['show_toggle'] == 't' ? $js_id : $element['#id'];
    $element['#suffix'] .= "\n<script type=\"text/javascript\">
var ". $js_id ." = new FCKeditor( '". $textarea_id ."' );
". $js_id .".BasePath	= '". $module_full_path ."/fckeditor/';
". $js_id .".Config['CustomConfigurationsPath'] = \"". $module_full_path ."/fckeditor.config.js\";
". $js_id .".Config['TextareaID'] = \"". $element['#id'] ."\";";

    //if ($conf['appearance_conf'] == 'f') {
    $element['#suffix'] .= "\n". $js_id .".ToolbarSet = \"". $toolbar ."\";
". $js_id .".Config['SkinPath'] = ". $js_id .".BasePath + \"editor/skins/". $conf['skin'] ."/\";
". $js_id .".Config['DefaultLanguage'] = \"". $conf['lang'] ."\";
". $js_id .".Config['AutoDetectLanguage'] = ". ($conf['auto_lang']=="t"?"true":"false") .";
". $js_id .".Height = \"". $height ."\";
". $js_id .".Config['ToolbarStartExpanded'] = ". ($conf['expand']=="t"?"true":"false") .";
". $js_id .".Width = \"". $width ."\";\n";
    //}
    //if ($conf['output_conf'] == 'f') {
    $element['#suffix'] .= "\n". $js_id .".Config['EnterMode'] = '". $conf['enter_mode'] ."';
". $js_id .".Config['ShiftEnterMode'] = \"". $conf['shift_enter_mode'] ."\";
". $js_id .".Config['FontFormats'] = \"". str_replace(",", ";", $conf['font_format']) ."\";
". $js_id .".Config['FormatSource'] = ". ($conf['format_source']=="t"?"true":"false") .";
". $js_id .".Config['FormatOutput'] = ". ($conf['format_output']=="t"?"true":"false") .";\n";
    //}
    
    if (function_exists('img_assist_perm')) { //#275158
      $element['#suffix'] .= "var fckImgAssistPath = '". base_path() . drupal_get_path('module', 'img_assist') ."';\n";    
    }
    // add code for filebrowser for users that have access
    if (user_access('allow fckeditor file uploads')==1) {
      $filebrowser = $conf['filebrowser'];
      if ($filebrowser == 'imce' && !module_exists('imce')) {
        $filebrowser = 'none';
      }
      $quickupload = $conf['quickupload'] == 't';
      
      // load variables used by both quick upload and filebrowser
      // and assure that the $_SESSION variables are loaded
      if ($quickupload || $filebrowser == 'builtin') {
        $connector_path = $module_drupal_path ."/fckeditor/editor/filemanager/connectors/php/connector.php" ;
        $connector_path = file_exists($connector_path) ? "../../connectors/php/connector.php" : "connectors/php/connector.php" ;
        $upload_path = $module_drupal_path ."/fckeditor/editor/filemanager/connectors/php/upload.php" ;
        $upload_path = file_exists($upload_path) ? "/fckeditor/editor/filemanager/connectors/php/upload.php" : "/fckeditor/editor/filemanager/upload/php/upload.php" ;
        if (!empty($profile->settings['UserFilesPath'])) $_SESSION['FCKeditor']['UserFilesPath'] = strtr($profile->settings['UserFilesPath'], array("%f" => file_directory_path(), "%u" => $user->uid, "%b" => $host));
        if (!empty($profile->settings['UserFilesAbsolutePath'])) $_SESSION['FCKeditor']['UserFilesAbsolutePath'] = strtr($profile->settings['UserFilesAbsolutePath'], array("%f" => file_directory_path(), "%u" => $user->uid, "%b" => base_path(), "%d" => $_SERVER['DOCUMENT_ROOT']));
        if (variable_get('file_downloads', '') == FILE_DOWNLOADS_PRIVATE) {
          $_SESSION['FCKeditor']['UserFilesPath'] = url('system/files') .'/';
          $_SESSION['FCKeditor']['UserFilesAbsolutePath'] = realpath(file_directory_path()) . DIRECTORY_SEPARATOR;
        }
      }
      
      if ($quickupload) {
        $element['#suffix'] .= $js_id .".Config['LinkUpload'] = true;\n";
        $element['#suffix'] .= $js_id .".Config['ImageUpload'] = true;\n";
        $element['#suffix'] .= $js_id .".Config['FlashUpload'] = true;\n";
        $element['#suffix'] .= $js_id .".Config['LinkUploadURL'] = '". $module_full_path . $upload_path ."';\n";
        $element['#suffix'] .= $js_id .".Config['ImageUploadURL'] = '". $module_full_path . $upload_path ."?Type=Image';\n";
        $element['#suffix'] .= $js_id .".Config['FlashUploadURL'] = '". $module_full_path . $upload_path ."?Type=Flash';\n";
      }
      else {
        $element['#suffix'] .= $js_id .".Config['LinkUpload'] = false;\n";
        $element['#suffix'] .= $js_id .".Config['ImageUpload'] = false;\n";
        $element['#suffix'] .= $js_id .".Config['FlashUpload'] = false;\n";
      }
      
      switch ($filebrowser) {
        case 'imce':
          $element['#suffix'] .= $js_id .".Config['LinkBrowser']= true;\n";
          $element['#suffix'] .= $js_id .".Config['ImageBrowser']= true;\n";
          $element['#suffix'] .= $js_id .".Config['FlashBrowser']= true;\n";
          $element['#suffix'] .= $js_id .".Config['LinkBrowserURL']= '". $host ."?q=imce&app=FCKEditor|url@txtUrl';\n";
          $element['#suffix'] .= $js_id .".Config['ImageBrowserURL']= '". $host ."?q=imce&app=FCKEditor|url@txtUrl|width@txtWidth|height@txtHeight';\n";
          $element['#suffix'] .= $js_id .".Config['FlashBrowserURL']= '". $host ."?q=imce&app=FCKEditor|url@txtUrl';\n";
          break;
        case 'builtin':
          $element['#suffix'] .= $js_id .".Config['LinkBrowser'] = true;\n";
          $element['#suffix'] .= $js_id .".Config['ImageBrowser'] = true;\n";
          $element['#suffix'] .= $js_id .".Config['FlashBrowser'] = true;\n";
          $element['#suffix'] .= $js_id .".Config['LinkBrowserURL'] = '". $module_full_path ."/fckeditor/editor/filemanager/browser/default/browser.html?Connector=". $connector_path ."&ServerPath=". $files_path ."';\n";
          $element['#suffix'] .= $js_id .".Config['ImageBrowserURL'] = '". $module_full_path ."/fckeditor/editor/filemanager/browser/default/browser.html?Type=Image&Connector=". $connector_path ."&ServerPath=". $files_path ."';\n";
          $element['#suffix'] .= $js_id .".Config['FlashBrowserURL'] = '". $module_full_path ."/fckeditor/editor/filemanager/browser/default/browser.html?Type=Flash&Connector=". $connector_path ."&ServerPath=". $files_path ."';\n";
          break;
        default:
        case 'none':
          $element['#suffix'] .= $js_id .".Config['LinkBrowser'] = false;\n";
          $element['#suffix'] .= $js_id .".Config['ImageBrowser'] = false;\n";
          $element['#suffix'] .= $js_id .".Config['FlashBrowser'] = false;\n";
          break;
      }
    }
    else {
      $element['#suffix'] .= $js_id .".Config['LinkBrowser'] = false;\n";
      $element['#suffix'] .= $js_id .".Config['ImageBrowser'] = false;\n";
      $element['#suffix'] .= $js_id .".Config['FlashBrowser'] = false;\n";
      $element['#suffix'] .= $js_id .".Config['LinkUpload'] = false;\n";
      $element['#suffix'] .= $js_id .".Config['ImageUpload'] = false;\n";
      $element['#suffix'] .= $js_id .".Config['FlashUpload'] = false;\n";
    }
    
    if (!empty($conf['js_conf'])) {
      $lines = preg_split("/[\n\r]+/", $conf['js_conf']);
      foreach ($lines as $l)
      if ($l && strlen($l) > 5) {
        $eqpos = strpos($l, "=");
        if (FALSE !== $eqpos) {
          $option = str_replace("FCKConfig.", "", substr($l, 0, $eqpos));
          $element['#suffix'] .= "\n". $js_id .".Config['". trim($option) ."'] =". substr($l, $eqpos + 1);
        }
      }
    }

    // add custom xml stylesheet if it exists
    if (!empty($conf['css_style']) && $conf['css_style'] == 'theme') {
      if (file_exists($themepath .'/fckstyles.xml')) {
        $styles_xml_path = $host . $themepath .'/fckstyles.xml';
        $element['#suffix'] .= $js_id .".Config['StylesXmlPath'] = \"". $styles_xml_path ."\";\n";
      }
    }
    else if (!empty($conf['css_style']) && $conf['css_style'] == 'self') {
      $conf['styles_path'] = str_replace("%h%t", "%t", $conf['styles_path']);
      $element['#suffix'] .=  $js_id .".Config['StylesXmlPath'] = \"". str_replace(array('%h', '%t', '%m'), array($host, $host . $themepath, $module_drupal_path), $conf['styles_path']) ."\";\n";
    }
    // add custom stylesheet if configured
    // lets hope it exists but we'll leave that to the site admin
    if ($conf['css_mode'] == 'theme') {
      $css = $themepath .'style.css';
      if (file_exists($css)) {
        $element['#suffix'] .=  $js_id .".Config['EditorAreaCSS'] = \"". $host . $css .",". $module_full_path ."/fckeditor.css\";";
      }
    }
    else if ($conf['css_mode'] == 'self') {
      $conf['css_path'] = str_replace("%h%t", "%t", $conf['css_path']);
      $element['#suffix'] .=  $js_id .".Config['EditorAreaCSS'] = \"". str_replace(array('%h', '%t'), array($host, $host . $themepath), $conf['css_path']) .",". $module_full_path ."/fckeditor.css\";";
    }
    $element['#suffix'] .= "</script>\n";

    if ($conf['popup']=="t") {
      // Add the script file with the popup open function.
      drupal_add_js($module_drupal_path .'/fckeditor.popup.js');
      $element['#suffix'] .= " <span class=\"fckeditor_popuplink\">(<a href=\"#\" onclick=\"FCKeditor_OpenPopup('". $module_full_path ."/fckeditor.popup.html?var=". $js_id ."&el=". $element['#id'] ."');return false;\">". t('Open rich editor') ."</a>)</span>";
    }
    else {
      // if no popup mode, add the editor initialization to the footer 	 
      // this obviously needs print($closure) in page.tpl.php 	 
      if ($fckeditor_on) {
        drupal_add_js('if (Drupal.jsEnabled) {$(document).ready(function() {if (typeof ('. $js_id .') != "undefined") { 	 
          if ($("#edit-teaser-js").size() && $("#edit-teaser-js").val().length){ 	 
            $("#edit-body").val($("#edit-teaser-js").val() + "<!--break-->" + $("#edit-body").val()); 	 
	        } 	 
	        '. $js_id .'.ReplaceTextarea();}});}', 'inline', 'footer');
      }
    }
  }

  // display the field id for administrators
  if (user_access('administer fckeditor')) {
    module_load_include('admin.inc', 'fckeditor');
    
    $element['#suffix'] .= t('<div class="textarea-identifier description">The ID for !excluding this element is %fieldname</div>', array(
      '!excluding' => l(t('excluding or including'), 'admin/settings/fckeditor'),
      '%fieldname' => fckeditor_rule_to_string(fckeditor_rule_create($_GET['q'], $element['#id'])),
    ));
  }

  return $element;
}

/**
 * sort roles according to precedence settings. previously sorted roles are followed by latest added roles.
 */
function fckeditor_sorted_roles() {
  static $order;
  if (isset($order)) {
    return $order;
  }
  $order = array();
  $roles = user_roles(0, 'access fckeditor');

  $result = db_query("SELECT settings FROM {fckeditor_settings} WHERE name='FCKeditor Global Profile'");
  $data = db_fetch_object($result);
  if (!empty($data->settings)) {
    $settings = unserialize($data->settings);
    if (isset($settings['rank']) && !empty($settings['rank']))
    foreach ($settings['rank'] as $rid) {
      if (isset($roles[$rid])) {
        $order[$rid] = $roles[$rid];
        unset($roles[$rid]);
      }
    }
  }
  krsort($roles);//sort the remaining unsorted roles by id, descending.
  $order += $roles;
  return $order;
}

/**
 * Test if client can render the FCKeditor
 * Use built-in test method in fckeditor.php
 * If fckeditor.php is not found, return false (probably in such case fckeditor is not installed correctly)
 *
 * @return
 *   TRUE if the browser is reasonably capable
 */
function fckeditor_is_compatible_client() {
  $fckeditor_main_file = drupal_get_path('module', 'fckeditor') .'/fckeditor/fckeditor.php';
  if (file_exists($fckeditor_main_file)) {
    include_once $fckeditor_main_file;
    if (function_exists('FCKeditor_IsCompatibleBrowser')) {
      return FCKeditor_IsCompatibleBrowser();
    }
    else {
      $fck = new FCKeditor('fake');
      return $fck->IsCompatible();
    }
  }

  return FALSE;
}

function fckeditor_user_get_setting($user, $profile, $setting) {
  $default = array(
  'default' => 't',
  'show_toggle' => 't',
  'popup' => 'f',
  'skin' => 'default',
  'toolbar' => 'default',
  'expand' => 't',
  'width' => '100%',
  'lang' => 'en',
  'auto_lang' => 't',
  );
  $settings = $profile->settings;

  if ($settings['allow_user_conf']) {
    $status = isset($user->{"fckeditor_". $setting}) ? $user->{"fckeditor_". $setting} : (isset($settings[$setting]) ? $settings[$setting] : $default[$setting]);
  }
  else {
    $status = isset($settings[$setting]) ? $settings[$setting] : $default[$setting];
  }

  return $status;
}

function fckeditor_user_get_profile($user) {
  static $profile_name;

  // Since fckeditor_profile_load() makes a db hit, only call it when we're pretty sure
  // we're gonna render fckeditor.
  if (!isset($profile_name[$user->uid])) {
    $sorted_roles = fckeditor_sorted_roles();
    foreach (array_keys($sorted_roles) as $rid) {
      if (isset($user->roles[$rid])) {
        break;
      }
    }

    if (isset($rid) && isset($user->roles[$rid])) {
      $profile_name[$user->uid] = db_result(db_query("SELECT s.name FROM {fckeditor_settings} s INNER JOIN {fckeditor_role} r ON r.name = s.name WHERE r.rid='%s'", $rid));
    }
    else if ($user->uid == 1) {
      $profile_name[$user->uid] = db_result(db_query_range("SELECT s.name FROM {fckeditor_settings} s INNER JOIN {fckeditor_role} r ON r.name = s.name ORDER BY r.rid DESC", 1));
    }
  }

  if (isset($profile_name[$user->uid]) && $profile_name[$user->uid]) {
    $profile = fckeditor_profile_load($profile_name[$user->uid]);
    return $profile;
  }

  return FALSE;
}