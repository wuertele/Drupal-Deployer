$Id$

Units module provides following API functions:

1) Main hooks and functions to use. These are considered to be stable part of
   the API.
 
  Hooks:
  ======
  
  hook_define_units()
  
    Main hook of Units module API.
    Returns array of arrays of unit definitions, with unit id's as keys.
    
    ID of unit is it's machine-readable name (i.e. alphanumeric characters 
    and underscores). It's database stored value, and must be unique within
    all Units implementations. For the sake of uniqueness, it's better to 
    prefix unit id with it's category id.
    
    For simplicity, unit category descriptions are stored in units themselves. 
    As there are probably not that many units needed for single site, it won't
    be big penalty.    

    Structure of unit definition:
    'id' => array('property1' => 'value1', 'property2' => 'value2', ...)
    
    Example definition providing all properties currently supported:
    
    'currency_usd' => array(
      // Short name ( ~ 1 word if possible).  
      // all Units implementations.
      'shortname' = 'USD',
       
      // Full name, e.g. several words describing unit.
      'fullname' = 'U.S. Dollar',

      // Optional detailed description of the unit.
      // Can contain several sentences.
      'description' => 'Currency of United States of America',
      
      // Symbol of unit, or abbreviation.
      'symbol' => '$',
      
      // Machine-readable name of the category of unit. Serves for storing 
      // category internally.
      'category_id' => 'currency',
      
      // Name of the category of unit. Serves for grouping up similar unit 
      // types e.g. in UI.
      'category' => 'World Currencies',
      
      // If defined, contains array of validation callbacks (function names) 
      // that check provided value and return any errors found. There can be 
      // many validation callbacks, which will be called one after another.
      // Note: validation facility is not yet implemented.
      'validation callback' => array('callback_1', 'callback_2'),
      
      // Decimals. The number of digits to the right of the decimal point.
      // Note: this is just recommended value. It's not enforced in Units 
      // module.
      'decimals' => '2'
    );
  
  
  hook_units_alter(&$units)
  
    Allows modules to alter units collection after it was built. It allows one 
    module to alter definition of other module's unit
    
 
  Some useful functions:
  ====================== 
  
  units_get_units()
    
    Main workhorse function.
    Returns array of unit definitions, keyed by unit id.
  
    
  units_get_enabled_units()
  
    Returns array of enabled units short names. By convention, empty array 
    means "all units are enabled". Units get enabled or disabled in UI at 
    "admin/content/units".
  
    
  units_get_unit_names($unit_id = NULL)
  
    Returns full name of selected unit, or array of unit full names, keyed by 
    unit short names, if unit is not provided.
  
  
  units_get_symbol($unit)
  
    Returns symbol for unit, if one exists, or empty string otherwise.  
  
  
3) Functions and hooks that are half-implemented, or not implemented yet. 
   These functions may be changed or removed in future.
  
   
  hook_units_conversions()
    
    Allows modules to describe possible conversions between units. This hook should return
    conversion matrix (2 dimensional array) of the following structure:
     
    $conversions['from_unit']['to_unit'] = array('converter1_id', 'converter2_id', ...);
    
    Converter IDs are defined by hook_units_converter_info(). Multiple converters 
    per from-to pair are supported so in the future it will be possible to choose 
    preferred conversion provider
  
    
  hook_units_conversions_alter(&$conversions)
  
    Allow modules to alter global conversion matrix after it was built.
  
    
  hook_units_converter_info()
  
    Allows modules to define unit converters. Should return array of converter 
    definitions, keyed by Converter ID (machine-readable name). To prevent 
    naming collisions, it's better to prefix ID with converter category or 
    module name.
    Example converter definition (from Currency Units module):
    
      'currency_yahoo' => array(
        // Human readable name
        'name'     => 'Yahoo Finance',     
        
        // Category of converter, used for grouping up converters e.e. in UI
        'category' => 'currency',
        
        // Converter function name, that will be called          
        'callback' => '_currency_units_convert_currency',
      );      
    
    Converter function should be like this: 
    foo_convert($unit_from, $unit_to, $amount, $options = array())
      
    Additional conversion options will be added in the future, probably. 
  
    
  units_validate($unit, $amount = NULL)
  
    Validates unit and optional amount using several methods: first, unit is
    checked against list of supported units. Then, if unit has one or more 
    validation callbacks they will be called one by another.
  
    
  units_convert($value, $from, $to, $options = array())
  
    Converts $value from $from unit type to $to unit type, using $options. 
    Currently options are not implemented and are subject for discussing. 
    First candidate for putting in $options is conversion provider selection 
    facility (to be implemented... )
