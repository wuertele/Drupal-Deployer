<?php
// $Id$

/**
 * @file
 * Tests for the path_redirect module.
 */

class PathRedirectUnitTest extends DrupalWebTestCase {
  function getInfo() {
    return array(
      'name' => t('Path redirect functionality'),
      'description' => t('Test basic redirection.'),
      'group' => t('Path redirect'),
    );
  }

  function setUp() {
    parent::setUp('path_redirect');
  }

  function testRedirects() {
    path_redirect_save(array('path' => 'test', 'redirect' => 'node'));
    path_redirect_save(array('path' => 'test?ferzle', 'redirect' => 'node', 'query' => 'ferzle'));
    path_redirect_save(array('path' => 'FrançAIS', 'redirect' => 'node'));
    path_redirect_save(array('path' => 'foo/ferzle_foobar', 'redirect' => 'node'));

    // Test a basic redirect.
    $this->assertRedirect('test', 'node');

    // Test a redirect with a trailing slash.
    $this->assertRedirect('test/', 'node');

    // Test a unicode URL.
    $this->assertRedirect('FrançAIS', 'node');

    // Test an URL with special characters.
    $this->assertRedirect('foo/ferzle_foobar', 'node');
  }

  function testNoCleanURLs() {
    variable_set('clean_url', 0);
    $this->testRedirects();
    variable_set('clean_url', 1);
  }

  private function assertRedirect($request, $redirect, $code = FALSE) {
    $this->drupalGet($request);
    if ($code) {
      $this->assertResponse($code);
    }
    $this->assertEqual($this->getUrl(), url($redirect, array('absolute' => TRUE)), t('Redirected from %request to %redirect.', array('%request' => $request, '%redirect' => $redirect)));
  }
}

class PathRedirectPathautoUnitTest extends DrupalWebTestCase {
  function getInfo() {
    return array(
      'name' => t('Pathauto integration'),
      'description' => t('Test integration with the pathauto module.'),
      'group' => t('Path redirect'),
      'dependencies' => array('pathauto', 'token'),
    );
  }

  function setUp() {
    parent::setUp('path', 'token', 'pathauto', 'path_redirect');
  }
}

class PathRedirectFunctionalTest extends DrupalWebTestCase {
  function getInfo() {
    return array(
      'name' => t('Path redirect administration'),
      'description' => t('Test redirect administration interface.'),
      'group' => t('Path redirect'),
    );
  }

  function setUp() {
    parent::setUp('path', 'path_redirect');

    $this->admin_user = $this->drupalCreateUser(array('administer redirects'));
    $this->drupalLogin($this->admin_user);
  }

  function testInactivePurging() {
    // Add two inactive redirects to the database.
    path_redirect_save(array('path' => 'test1', 'redirect' => 'node', 'last_used' => $_SERVER['REQUEST_TIME'] - 610000));
    path_redirect_save(array('path' => 'test2', 'redirect' => 'node', 'last_used' => $_SERVER['REQUEST_TIME'] - 610000));

    // Purging is disabled by default, so after running cron both redirects should not be removed.
    $this->drupalGet('cron.php');
    $this->assertTrue(path_redirect_load(array('path' => 'test1')), t('Inactive redirect not removed.'));
    $this->assertTrue(path_redirect_load(array('path' => 'test2')), t('Inactive redirect not removed.'));

    // Enable purging of inactive redirects.
    $edit = array('path_redirect_purge_inactive' => 604800);
    $this->drupalPost('admin/build/path-redirect/settings', $edit, t('Save configuration'));
    $this->assertText(t('The configuration options have been saved.'));

    // Run one of the redirects and test that the last used timestamp was updated.
    $this->drupalGet('test1');
    $this->assertTrue(db_result(db_query("SELECT last_used FROM {path_redirect} WHERE path = 'test1'")) > $_SERVER['REQUEST_TIME'], t('Last used timestamp was updated.'));

    // Run cron and test that the inactive redirect was removed.
    $this->drupalGet('cron.php');
    //drupal_cron_run();
    //path_redirect_cron();
    $this->assertTrue(path_redirect_load(array('path' => 'test1')), t('Active redirect not removed.'));
    $this->assertFalse(path_redirect_load(array('path' => 'test2')), t('Inactive redirect removed.'));
  }

  function testAutocomplete() {
    // Create 404 errors.
    $this->drupalGet('test1');
    $this->drupalGet('test2');
    $this->drupalGet('test2');

    // Create a 404 and then create a valid redirect for it.
    $this->drupalGet('test3');
    path_redirect_save(array('path' => 'test3', 'redirect' => 'node'));

    // Create a 404 and then create a valid path for it.
    $this->drupalGet('node/1');
    $this->drupalCreateNode();

    // Test that only the valid 404s are found in the autocomplete.
    $this->drupalGet('admin/build/path-redirect/autocomplete');
    $this->assertText('test1');
    $this->assertText('test2');
    $this->assertNoText('node/1');
    $this->assertNoText('test3');

    // Test that the 404 with the greater hits is listed first.
    $this->assertTrue(strpos($this->drupalGetContent(), 'test1') > strpos($this->drupalGetContent(), 'test2'), t('Paths ordered correctly.'));
  }
}
