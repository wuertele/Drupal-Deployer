<?php
// $Id$

/**
 * @file
 * recipe_mastercook4.module - Enables importing and exporting of MasterCook4 format recipes.
 */

/**
 * Implementation of hook_recipeio($type).
 */
function recipe_mastercook4_recipeio($type) {
  $supported = array(
    'export_single' => array(
      'format_name' => t('MasterCook4'),
      'callback' => 'recipe_mastercook4_export_single',
      'format_help' => t('Export to a recipe to MasterCook4 based text format.')
    ),
    'export_multi' => array(
      'format_name' => t('MasterCook4'),
      'callback' => 'recipe_mastercook4_export_multi',
      'format_help' => t('Export all recipes to MasterCook4 based text format.')
    )
  );
  return array('mastercook4'=>$supported[$type]);
}

function recipe_mastercook4_export_multi() {
  $rs = db_query("SELECT n.nid from {node} n WHERE n.type='recipe' and n.status>0 ORDER BY n.title");
  $o = '';
  while ($row = db_fetch_object($rs)) {
    $o .= recipe_mastercook4_export_single($row->nid);
  }
  drupal_set_header('Content-type: text');
  return $o;
}

function recipe_mastercook4_export_single($nid = NULL) {
  if ( $nid === NULL ) {
    drupal_set_message(t('Recipe not found.'));
    drupal_not_found();
  }

  $node = node_load(array('nid' => $nid, 'type' => 'recipe'));

  drupal_set_header('Content-type: text');
  return merge_template($node);
}



function merge_template($node = NULL) {

  //prepare prepare time
  $decimal_hours = $node->preptime/60;
  $hours = floor($decimal_hours);
  $minutes = sprintf("%02d",floor(($decimal_hours - $hours)*60));
  $preptime = "$hours:$minutes";

  //prepare categories
  $categories = '';
  $vocabs = taxonomy_get_vocabularies('recipe');
  foreach ($vocabs as $vocab) {
    $terms = taxonomy_node_get_terms_by_vocabulary($node, $vocab->vid);
    foreach ( $terms as $term ) {
      $term = array_shift($terms);
      $categories .= sprintf("%-33s", $term->name);
    }
  }
  $categories = wordwrap($categories, 66, "\n                ");

  //prepare ingredients
  $ingredients = '';
  foreach ( $node->ingredients as $key => $i ) {
    $ingredients .= format_mastercook4_ingredient($i);
  }

  // get the template string
  $template = get_template();
  // merge title
  $template = str_replace("<<title>>", $node->title, $template);
  // merge recipe by
  $template = str_replace("<<recipeby>>", $node->source, $template);
  // merge serving size
  $template = str_replace("<<servingsize>>", $node->yield, $template);
  // merge preptime
  $template = str_replace("<<preptime>>", $preptime, $template);
  // merge categories
  $template = str_replace("<<categories>>", $categories, $template);
  // merge ingredients
  $template = str_replace("<<ingredients>>", $ingredients, $template);
  // merge instructions
  $template = str_replace("<<instructions>>", $node->instructions, $template);
  // merge notes
  if ( $node->notes != '' ) {
    $node->notes = "NOTES : " . $node->notes;
  }
  $template = str_replace("<<notes>>", $node->notes, $template);

  return $template;
}


function get_template() {
$template = "
                     *  Exported from  MasterCook  *

<<title>>

Recipe By     : <<recipeby>>
Serving Size  : <<servingsize>>   Preparation Time :<<preptime>>
Categories    : <<categories>>

  Amount  Measure       Ingredient -- Preparation Method
--------  ------------  --------------------------------
<<ingredients>>
<<instructions>>

                   - - - - - - - - - - - - - - - - - -

<<notes>>
";
return $template;
}

function format_mastercook4_ingredient($ingredient = NULL) {
  $ingredient->quantity = recipe_ingredient_quantity_from_decimal($ingredient->quantity);
  // no html entities
  $ingredient->quantity = str_replace('&frasl;', '/', $ingredient->quantity);
  $ingredient->unit_name = recipe_unit_name($ingredient->unit_id);
  $o = sprintf("%8s  %-12s  %s\n", $ingredient->quantity, $ingredient->unit_name, $ingredient->name);
  return $o;
}
